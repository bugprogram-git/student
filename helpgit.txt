1.git的三个区域
(1).工作区(即当前目录)
(2).暂存区
(3).版本库
2.初始化git仓库
git clone +远程仓库的地址(将远程仓库的文件拷贝一份到本地)
git init 默认在当前目录下创建一个git文件夹(即将当前目录创建成为git仓库),也可以指定仓库名,即在当前目录创建文件夹并将其初始化成为git仓库
首次初始化仓库,必须至少commit一次,才能创建master分支,首次初始化无分支
3.将工作区文件加入暂存区
git add .(此命令默认将当前工作区的所有文件加入暂存区)
若加入暂存区后想撤销操作,可以使用git reset HEAD(此命令会将当前分支的暂存区目录树进行重写,但是工作区不受影响)
git rm --cache <file>删除暂存区的指定文件
git checkout .或者git checkout --<file>会将暂存区的所有文件或者是指定文件替换工作区的所有或者是指定文件
4.将暂存区的文件加入版本库
git commit -m "commit message"将暂存区的文件加入版本库,git reset --hard+版本号,将当前版本回退到指定的commit版本
git log 查看提交历史(git log --graph --pretty=format"%h %s")(图形化查看提交历史)
5.git status检测工作区的文件变化,git rm删除工作区的指定文件 git remote查看远程仓库(可以指定-v参数查看其url地址)
git remote add repostory_name https://github.com/bugprogram-git/student.git添加远程仓库
git pull repostory_name master将远程仓库的master版本更新到本地
git push repostory_name master将本地仓库的版本推送到远程仓库
6.git rebase
若想将本地的commit历史合并,则可以git rebase -i HEAD~num(num为最近的次数)
7.如果commit历史出现了交叉,如果想将其合并到主分支6.git rebase
若想将本地的commit历史合并,则可以git rebase -i HEAD~num(num为最近的次数)
如果本地远程的commit出现交叉,则可以通过git fetch拉取远程的版本,然后git rebase orgin/main 进行合并,这样可以让版本不会出现交叉
如果本地出现交叉,可以跳到交叉版本,然后git rebase master,在跳到主分支,进行merge
如果本地远程的代码出现冲突,则需要手动解决,如果git rebase出现冲突,则rebase会停止,此时需要你手动解决指定冲突文件,然后在git add .
再次 git rebase --continue
总结命令如下:

1.git init (初始化git仓库)
2.git add . (加入暂存区)
3.git commit -m "commit message" (提交到版本仓库)
4.git reset --hard 版本号(回退到指定版本号)
5.git branch (查看分支)(后面可以加上分支名,可以创建该分支,(以当前分支为模板))(同时可以指定-d参数可以删除该分支)
6.git checkout branchname(切换分支)
7.git checkout -b branch_name(创建并切换到改分支)
8.git status (查看工作区以及暂存区的文件变化)
9.git remote (查看远程仓库)(可以指定-v查看详细信息)
10.git remote add repostory_name https://github.com/bugprogram-git/student.git(添加远程仓库)
11. git log查看commit 历史 git reflog 查看commit 历史 可以指定--graph查看图形化的提交历史也可以指定--pretty=format:"%h %s"
查看格式化后的提交历史.
12.git blame <file>查看指定文件的修改记录.git log --author=author_name 查看指定作者提交的记录




this is the file end!
